{"version":3,"sources":["components/4_render_components/PaymentsRend.js","pages/Payments.js","components/6_common_help_comp/AlertBox.js","mathfunctions/listFunctions.js","components/6_common_help_comp/ModalBox.js","mathfunctions/liquidsFunctions.js"],"names":["moment","require","PaymentsRend","memo","ownerDates","ownerInitialDates","liquidWidth","ownerAllPayments","firebase","useContext","FirebaseContext","useState","modalClass","setClass","textModal","setModalText","Id","setId","alertClass","setAlertClass","alertText","setAlertText","form","setForm","Object","keys","length","JSON","parse","localStorage","getItem","setItem","stringify","changeHandler","event","target","name","value","console","log","newClientPaymentInfo","id","className","htmlFor","type","placeholder","dateStart","format","onChange","dateFinish","dateOfEnd","onClick","preventDefault","changeDates","then","catch","addDates","setTimeout","map","pay","newProjectPayment","payNumber","payDate","concat","key","width","csvData","fileName","textCSV","ModalBox","modalText","modalFunction","innerFunction","AlertBox","Liquids","contentWidthNumber","Math","pow","window","innerWidth","email","fire","auth","currentUser","split","loading","dates","fetchDates","projects","fetchProjects","payments","fetchPayments","fetchClients","owner","uid","find","date","filter","ownerAllProjects","project","useEffect","Loader","icon","Alert","size","ariaLabel","Flame","NewListLiquidsCount","routes","oldRouteNumber","listLiquids","route","balanceStart","received","expended","balanceFinish","liq","liquidName","modifyLiquid","shift","modifyLiquidList","parseInt","Number","routNumber","Liquid","sort","a","b","ExportReactCSV","e","wb","Sheets","data","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV"],"mappings":"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","file":"static/js/9.3e08224c.chunk.js","sourcesContent":["import React, { memo, useState, useContext } from \"react\";\r\nimport { FirebaseContext } from \"../../context/fiebase/firebaseContext\";\r\nimport { ModalBox } from \"../6_common_help_comp/ModalBox\";\r\nimport { AlertBox } from \"../6_common_help_comp/AlertBox\";\r\nimport { ExportReactCSV } from \"../../mathfunctions/liquidsFunctions\";\r\n\r\nvar moment = require(\"moment\");\r\n\r\nexport const PaymentsRend = memo(\r\n  ({\r\n    ownerDates,\r\n    ownerInitialDates,\r\n    liquidWidth,\r\n    ownerAllPayments,\r\n    //ownerAllProjects,\r\n  }) => {\r\n    const firebase = useContext(FirebaseContext);\r\n    let [modalClass, setClass] = useState(\"modal\");\r\n    let [textModal, setModalText] = useState();\r\n    let [Id, setId] = useState();\r\n    let setModalClass = () => {\r\n      if ((modalClass = \"modal\")) {\r\n        setClass(\"open\");\r\n      } else {\r\n        setClass(\"modal\");\r\n      }\r\n    };\r\n    let [alertClass, setAlertClass] = useState(\"modal\");\r\n    let [alertText, setAlertText] = useState(\"\");\r\n    let [form, setForm] = useState({\r\n      ...ownerInitialDates,\r\n    });\r\n    if (Object.keys(form).length === 0) {\r\n      form = JSON.parse(localStorage.getItem(\"date\"));\r\n    } else {\r\n      localStorage.setItem(\"date\", JSON.stringify(form));\r\n    }\r\n    const changeHandler = (event) => {\r\n      setForm({ ...form, [event.target.name]: event.target.value });\r\n      console.log(event.target.name, event.target.value);\r\n    };\r\n    // //------------------------Set deleted Data-----------------------//\r\n    // let holdTime = new Date();\r\n    // let requiredHoldTime = new Date();\r\n    // holdTime.setMonth(holdTime.getMonth() - Number(form.dateOfEnd));\r\n    // requiredHoldTime.setMonth(holdTime.getMonth() - 36);\r\n    // //----------------------Set deleted old Items--------------------//\r\n    // let routesForRemove = [];\r\n    // let listsForRemove = [];\r\n    // if (Number(form.dateOfEnd) > 36) {\r\n    //   routesForRemove = ownerAllRoutes.filter(\r\n    //     (route) => Date.parse(route.routArrival) < Date.parse(requiredHoldTime)\r\n    //   );\r\n    //   if (routesForRemove.length === 0) {\r\n    //     routesForRemove = ownerAllRoutes.filter(\r\n    //       (route) => Date.parse(route.routDate) < Date.parse(requiredHoldTime)\r\n    //     );\r\n    //   }\r\n    //   listsForRemove = ownerAllLists.filter(\r\n    //     (list) => Date.parse(list.listDate) < Date.parse(requiredHoldTime)\r\n    //   );\r\n    // } else {\r\n    //   routesForRemove = ownerAllRoutes.filter(\r\n    //     (route) => Date.parse(route.routArrival) < Date.parse(holdTime)\r\n    //   );\r\n    //   if (routesForRemove.length === 0) {\r\n    //     routesForRemove = ownerAllRoutes.filter(\r\n    //       (route) => Date.parse(route.routDate) < Date.parse(holdTime)\r\n    //     );\r\n    //   }\r\n    //   listsForRemove = ownerAllLists.filter(\r\n    //     (list) => Date.parse(list.listDate) < Date.parse(holdTime)\r\n    //   );\r\n    // }\r\n    //----------------------------Set Date---------------------------//\r\n    const createHandler = (event) => {\r\n      event.preventDefault();\r\n      // if (routesForRemove.length !== 0) {\r\n      //   setId(event);\r\n      //   setModalText(dataWarningText);\r\n      //   setModalClass();\r\n      // }\r\n      // if (listsForRemove.length !== 0) {\r\n      //   setId(event);\r\n      //   setModalText(dataWarningText);\r\n      //   setModalClass();\r\n      // }\r\n      if (!ownerDates) {\r\n        firebase\r\n          .addDates({ ...form })\r\n          .then(() => { })\r\n          .catch(() => {\r\n            console.log(\"Error\");\r\n            setAlertText(\"Ошибка сервера!\");\r\n            setAlertClass(\"open\");\r\n          });\r\n        setAlertText(\"Дату встановлено!\");\r\n        setAlertClass(\"open\");\r\n      } else {\r\n        firebase\r\n          .changeDates({ ...form, id: ownerDates.id })\r\n          .then(() => { })\r\n          .catch(() => {\r\n            setAlertText(\"Ошибка сервера!\");\r\n            setAlertClass(\"open\");\r\n          });\r\n        setAlertText(\"Дату змінено!\");\r\n        setAlertClass(\"open\");\r\n      }\r\n      setTimeout(() => {\r\n        setAlertClass(\"modal\");\r\n      }, 1000);\r\n    };\r\n    //------------------------Delete Old Data-----------------------//\r\n    const deleteHandler = (event) => {\r\n      event.preventDefault();\r\n      // routesForRemove.forEach((element) => {\r\n      //   firebase\r\n      //     .removeRoute(element.id)\r\n      //     .then(() => {})\r\n      //     .catch(() => {\r\n      //       setAlertText(\"Ошибка сервера!\");\r\n      //       setAlertClass(\"open\");\r\n      //     });\r\n      //   setAlertText(\"Маршрути успішно видалено!\");\r\n      //   setAlertClass(\"open\");\r\n      // });\r\n      // listsForRemove.forEach((element) => {\r\n      //   firebase\r\n      //     .removeList(element.id)\r\n      //     .then(() => {})\r\n      //     .catch(() => {\r\n      //       setAlertText(\"Ошибка сервера!\");\r\n      //       setAlertClass(\"open\");\r\n      //     });\r\n      //   setAlertText(\"Застарілі дані успішно видалено!\");\r\n      //   setAlertClass(\"open\");\r\n      // });\r\n      // setTimeout(() => {\r\n      //   setAlertClass(\"modal\");\r\n      // }, 1000);\r\n    };\r\n    let  newClientPaymentInfo = [];\r\n    // let dataWarningText =\r\n    //   \"У вас є застарілі дані, необхідно видалити їх та звільніти місце!\";\r\n    let dataWarningThanksText =\r\n      \"Дякуємо за видалення застарілих даних, ви звільнили додаткове місце!\";\r\n    return (\r\n      <div>\r\n        <div id=\"2345\" className=\"createTimeBasis\">\r\n          <div className=\"d-flex flex-wrap justify-content-around\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"dateStart\">\r\n                <small>Початкова дата</small>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                placeholder=\"Початкова дата\"\r\n                value={moment(form.dateStart).format(\"YYYY-MM-DD\")}\r\n                name=\"dateStart\"\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"dateFinish\">\r\n                <small>Кінцева дата</small>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                placeholder=\"Кінцева дата\"\r\n                value={moment(form.dateFinish).format(\"YYYY-MM-DD\")}\r\n                name=\"dateFinish\"\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"dateOfEnd\">\r\n                <small>Час зберігання,міс</small>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                placeholder=\"Період зберігання,міс\"\r\n                value={form.dateOfEnd}\r\n                name=\"dateOfEnd\"\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n            <div className=\"createDateBtnConteiner\">\r\n              <button\r\n                className=\"btn btn-success createDateBtn\"\r\n                value=\"Дата\"\r\n                name=\"submit\"\r\n                onClick={createHandler}\r\n              >\r\n                <small>Зберегти</small>\r\n              </button>\r\n            </div>\r\n            <div className=\"createDateBtnConteiner\">\r\n              <button\r\n                className=\"btn btn-danger createDateBtn\"\r\n                value=\"Дата\"\r\n                name=\"submit\"\r\n                onClick={(event) => {\r\n                  setId(event);\r\n                  setModalText(dataWarningThanksText);\r\n                  setModalClass();\r\n                }}\r\n              >\r\n                <small>Очистити</small>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"d-flex flex-wrap justify-content-around payments-conteiner\"\r\n        >\r\n          <div className=\"createPaymentsHeadBasis\">\r\n            <table className=\"allPaymentTable\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <small className=\"paymentNumber\">№</small>\r\n                  </td>\r\n                  <td>\r\n                    <small className=\"paymentData\">Дата</small>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          {ownerAllPayments.map((pay) => {\r\n            // ownerRoutes.sort((a, b) => a.routeDate - b.routeDate);\r\n            // let liquidDensities = CountStartDensity(ownerRoutes, pay);\r\n            // let firstDensity = Number(liquidDensities[0]);\r\n            // if (!firstDensity) {\r\n            //   firstDensity = 1;\r\n            // }\r\n            // let endDensity = Number(\r\n            //   liquidDensities[liquidDensities.length - 1]\r\n            // );\r\n            // if (!endDensity) {\r\n            //   endDensity = 1;\r\n            // }\r\n            // let balanceStartWeight =\r\n            //   parseInt(pay.balanceStart * firstDensity * 100) / 100;\r\n            // let balanceReceivedWeight =\r\n            //   parseInt(pay.received * endDensity * 100) / 100;\r\n            // let balanceExpendedWeight =\r\n            //   parseInt(pay.expended * endDensity * 100) / 100;\r\n            // let balanceFinishWeight =\r\n            //   parseInt(pay.balanceFinish * endDensity * 100) / 100;\r\n            // if (pay.name === \"\") {\r\n            //   return null;\r\n            // }\r\n            let newProjectPayment = {};\r\n            newProjectPayment = {\r\n              \"№ проплати\": pay.payNumber,\r\n              \"Дата проплати\": pay.payDate,\r\n            };\r\n            newClientPaymentInfo =  newClientPaymentInfo.concat(newProjectPayment);\r\n            return (\r\n              <div\r\n                key={pay.id}\r\n                className=\"createPaymentsHeadBasis\" \r\n                width={{ liquidWidth }}\r\n              >\r\n                <div>\r\n                  <table className=\"allPaymentTable\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <small className=\"paymentNumber\">\r\n                            {pay.payNumber}\r\n                          </small>\r\n                        </td>\r\n                        <td>\r\n                          <small className=\"paymentData\">\r\n                            {pay.payDate}\r\n                          </small>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <ExportReactCSV\r\n          csvData={newClientPaymentInfo}\r\n          fileName={\"Проплати\"}\r\n          textCSV=\"EXEL\"\r\n        />\r\n        <ModalBox\r\n          modalClass={modalClass}\r\n          modalText={textModal}\r\n          modalFunction={setClass}\r\n          Id={Id}\r\n          innerFunction={deleteHandler}\r\n        />\r\n        <AlertBox\r\n          modalClass={alertClass}\r\n          modalText={alertText}\r\n          modalFunction={setAlertClass}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { memo, useContext, useEffect } from \"react\";\r\nimport { FirebaseContext } from \"../context/fiebase/firebaseContext\";\r\nimport { PaymentsRend } from \"../components/4_render_components/PaymentsRend\";\r\nimport fire from \"../config/Fire\";\r\nimport { Loader } from \"../components/6_common_help_comp/Loader\";\r\n\r\nconst Liquids = memo(() => {\r\n    let contentWidthNumber =\r\n    7.2096691 * Math.pow(10, -14) * Math.pow(window.innerWidth, 5) -\r\n    3.8875191 * Math.pow(10, -10) * Math.pow(window.innerWidth, 4) +\r\n    7.5708477 * Math.pow(10, -7) * Math.pow(window.innerWidth, 3) -\r\n    6.0702864 * Math.pow(10, -4) * Math.pow(window.innerWidth, 2) +\r\n    0.1046586 * window.innerWidth +\r\n    106.6952733;\r\n  let liquidWidth = `${contentWidthNumber + 4}%`;\r\n  let email = fire.auth.currentUser.email;\r\n\r\n  email = email.split(\"@\")[0];\r\n  const {\r\n    loading,\r\n    dates,\r\n    fetchDates,\r\n    projects,\r\n    fetchProjects,\r\n    payments,\r\n    fetchPayments,\r\n    fetchClients,\r\n  } = useContext(FirebaseContext);\r\n  let owner = fire.auth.currentUser.uid;\r\n  let ownerDates = dates.find((date) => date.owner === owner);\r\n  let ownerAllPayments = payments.filter((pay) => pay.owner === owner);\r\n  let ownerAllProjects = projects.filter((project) => project.owner === owner);\r\n  let ownerInitialDates = {};\r\n  if (!ownerDates) {\r\n    ownerInitialDates = {\r\n      dateStart: \"1950.01.01\",\r\n      dateOfEnd: 36,\r\n      dateFinish: \"2080.01.01\",\r\n    };\r\n  }\r\n  // let ownerPayments = ownerAllPayments.filter(\r\n  //   (pay) => pay.payDate >= ownerDates.dateStart\r\n  // );\r\n  // ownerPayments = ownerPayments.filter(\r\n  //   (pay) => pay.routDate <= ownerDates.dateFinish\r\n  // );\r\n//   let listLiquids = CommonLiquidsCount(ownerRoutes, cars);\r\n//  // console.log(ownerAllRoutes)\r\n//   listLiquids = listLiquids.sort((a, b) => a.name - b.name);\r\n  useEffect(() => {\r\n    fetchDates();\r\n    fetchProjects();\r\n    fetchPayments();\r\n    fetchClients();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <small>{email}</small>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <PaymentsRend\r\n          //listLiquids={listLiquids}\r\n          ownerDates={ownerDates}\r\n          ownerInitialDates={ownerInitialDates}\r\n          liquidWidth={liquidWidth}\r\n          ownerAllPayments={ownerAllPayments}\r\n          ownerAllProjects={ownerAllProjects}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Liquids;\r\n","import React from \"react\";\r\nimport Octicon, { Alert, Flame } from \"@primer/octicons-react\";\r\n\r\nexport const AlertBox = ({ modalClass, modalText, modalFunction }) => {\r\n  let setClass = () => {\r\n    modalFunction(\"modal\");\r\n  };\r\n  return (\r\n    <div id={modalClass}>\r\n      <div className=\"window\">\r\n        <div className={modalClass}>\r\n          <div className=\"top-content\">\r\n            <div className=\"alert-left-text\">\r\n              <pre>\r\n                <Octicon icon={Alert} size=\"medium\" ariaLabel=\"Alert\" />          Увага\r\n                !!!\r\n              </pre>\r\n            </div>\r\n            <button\r\n              id=\"deleteModal\"\r\n              type=\"button\"\r\n              className=\"btn btn-outline-secondary btn-sm\"\r\n              onClick={() => setClass()}\r\n            >\r\n              &times;\r\n            </button>\r\n            <Octicon\r\n              icon={Flame}\r\n              size=\"large\"\r\n              ariaLabel=\"Flame\"\r\n              className=\"alertFlame\"\r\n            />\r\n            <hr/>\r\n            <p>{modalText}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const NewListLiquidsCount = (routes) => {\r\n  let oldRouteNumber = 0;\r\n  let listLiquids = [];\r\n  if (!routes) {\r\n    routes = [];\r\n  }\r\n  routes.map((route) => {\r\n    let balanceStart = 0;\r\n    let received = 0;\r\n    let expended = 0;\r\n    let balanceFinish = 0;\r\n    let existLiquid = !!listLiquids.filter(\r\n      (liq) => liq.name === route.liquidName\r\n    ).length;\r\n    if (!existLiquid) {\r\n      balanceStart =\r\n        parseInt((balanceStart + Number(route.balanceStart)) * 100, 10) / 100;\r\n      received = parseInt((received + Number(route.received)) * 100, 10) / 100;\r\n      expended = parseInt((expended + Number(route.expended)) * 100, 10) / 100;\r\n      balanceFinish =\r\n        parseInt((balanceFinish + Number(route.balanceFinish)) * 100, 10) / 100;\r\n      let Liquid = {\r\n        name: route.liquidName,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = listLiquids.concat([Liquid]);\r\n    } else {\r\n      let modifyLiquid = listLiquids\r\n        .filter((liq) => liq.name === route.liquidName)\r\n        .shift();\r\n      let modifyLiquidList = listLiquids.filter(\r\n        (liq) => liq.name !== route.liquidName\r\n      );\r\n      balanceStart =\r\n        parseInt(Number(modifyLiquid.balanceStart) * 100, 10) / 100;\r\n      if (Number(route.routNumber) < Number(oldRouteNumber)) {\r\n        balanceStart = parseInt(Number(route.balanceStart) * 100) / 100;\r\n      } else {\r\n        balanceStart =\r\n          parseInt(Number(modifyLiquid.balanceStart) * 100, 10) / 100;\r\n      }\r\n      received =\r\n        parseInt(\r\n          (Number(modifyLiquid.received) + Number(route.received)) * 100,\r\n          10\r\n        ) / 100;\r\n      expended =\r\n        parseInt(\r\n          (Number(modifyLiquid.expended) + Number(route.expended)) * 100,\r\n          10\r\n        ) / 100;\r\n      if (Number(route.routNumber) < Number(oldRouteNumber)) {\r\n        balanceFinish =\r\n          parseInt(Number(modifyLiquid.balanceFinish) * 100, 10) / 100;\r\n      } else {\r\n        balanceFinish = parseInt(Number(route.balanceFinish) * 100, 10) / 100;\r\n      }\r\n      let Liquid = {\r\n        name: route.liquidName,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = modifyLiquidList.concat([Liquid]);\r\n    }\r\n    oldRouteNumber = Number(route.routNumber);\r\n    return route;\r\n  });\r\n  listLiquids.sort((a, b) => a.name - b.name);\r\n  return listLiquids;\r\n};\r\n\r\nexport const CommonListRoute = (routes) => {\r\n  if (!routes) {\r\n    routes = [];\r\n  }\r\n  let commonRoute = 0;\r\n  routes.map((route) => {\r\n    commonRoute = commonRoute + Number(route.routeTotal);\r\n    return route;\r\n  });\r\n  return commonRoute;\r\n};\r\n\r\nexport const CommonListTime = (routes) => {\r\n  if (!routes) {\r\n    routes = [];\r\n  }\r\n  let commonTime = 0;\r\n  routes.map((route) => {\r\n    commonTime = commonTime + Number(route.routTotalTime);\r\n    return route;\r\n  });\r\n  return Math.round(commonTime * 100) / 100;\r\n};\r\n","import React from \"react\";\r\nimport Octicon, { Alert, Flame } from \"@primer/octicons-react\";\r\n\r\nexport const ModalBox = ({\r\n  modalClass,\r\n  modalText,\r\n  modalFunction,\r\n  Id,\r\n  innerFunction,\r\n}) => {\r\n  let setClass = () => {\r\n    modalFunction(\"modal\");\r\n  };\r\n  return (\r\n    <div id={modalClass}>\r\n      <div className=\"window\">\r\n        <form className={modalClass}>\r\n          <div className=\"top-content\">\r\n            <div className=\"left-text\">\r\n              <pre>\r\n                <Octicon icon={Alert} size=\"medium\" ariaLabel=\"Alert\" />            Увага!!!\r\n              </pre>\r\n            </div>\r\n            <button\r\n              id=\"deleteModal\"\r\n              type=\"button\"\r\n              className=\"btn btn-outline-secondary btn-sm\"\r\n              onClick={() => setClass()}\r\n            >\r\n              &times;\r\n            </button>\r\n            <Octicon\r\n              icon={Flame}\r\n              size=\"large\"\r\n              ariaLabel=\"Flame\"\r\n              className=\"flame\"\r\n            />\r\n            <p>{modalText}</p>\r\n            <button\r\n              id=\"close-btn\"\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n              onClick={() => {\r\n                innerFunction(Id);\r\n                setClass();\r\n              }}\r\n            >\r\n              Видалити дані!\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { NewListLiquidsCount } from \"../mathfunctions/listFunctions\";\r\nvar moment = require(\"moment\");\r\n\r\nexport const CountStartDensity = (routes, liquid) => {\r\n  let liquidRoutes = routes.filter((route) => route.liquidName === liquid.name);\r\n  let dansitiesArray = liquidRoutes.map((route) => {\r\n    return route.density;\r\n  });\r\n  return dansitiesArray;\r\n};\r\n\r\nexport const ExportReactCSV = ({ csvData, fileName, textCSV }) => {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n  const exportToCSV = (csvData, fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(csvData);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n  return (\r\n    <button\r\n      onClick={(e) => exportToCSV(csvData, fileName)}\r\n      className=\"btn btn-success createExelBtn\"\r\n    >\r\n      <small>{textCSV}</small>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const CommonLiquidsCount = (routes, cars) => {\r\n  let commonListLiquids = [];\r\n  let listLiquids = [];\r\n  if (!routes) {\r\n    routes = [];\r\n  }\r\n  cars.map((car) => {\r\n    let carRoutes = routes.filter((route) => route.listOwner === car.id);\r\n    let carListLiquids = NewListLiquidsCount(carRoutes);\r\n    commonListLiquids = commonListLiquids.concat(carListLiquids);\r\n    return car;\r\n  });\r\n  commonListLiquids.map((liquid) => {\r\n    let balanceStart = 0;\r\n    let received = 0;\r\n    let expended = 0;\r\n    let balanceFinish = 0;\r\n    let existLiquid = !!listLiquids.filter((liq) => liq.name === liquid.name)\r\n      .length;\r\n    if (!existLiquid) {\r\n      balanceStart =\r\n        parseInt((balanceStart + Number(liquid.balanceStart)) * 100, 10) / 100;\r\n      received = parseInt((received + Number(liquid.received)) * 100, 10) / 100;\r\n      expended = parseInt((expended + Number(liquid.expended)) * 100, 10) / 100;\r\n      balanceFinish =\r\n        parseInt((balanceFinish + Number(liquid.balanceFinish)) * 100, 10) /\r\n        100;\r\n      let Liquid = {\r\n        name: liquid.name,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = listLiquids.concat([Liquid]);\r\n    } else {\r\n      let modifyLiquid = listLiquids\r\n        .filter((liq) => liq.name === liquid.name)\r\n        .shift();\r\n      let modifyLiquidList = listLiquids.filter(\r\n        (liq) => liq.name !== liquid.name\r\n      );\r\n      balanceStart =\r\n        parseInt(\r\n          (Number(modifyLiquid.balanceStart) + Number(liquid.balanceStart)) *\r\n            100,\r\n          10\r\n        ) / 100;\r\n      received =\r\n        parseInt(\r\n          (Number(modifyLiquid.received) + Number(liquid.received)) * 100,\r\n          10\r\n        ) / 100;\r\n      expended =\r\n        parseInt(\r\n          (Number(modifyLiquid.expended) + Number(liquid.expended)) * 100,\r\n          10\r\n        ) / 100;\r\n      balanceFinish =\r\n        parseInt(\r\n          (Number(modifyLiquid.balanceFinish) + Number(liquid.balanceFinish)) *\r\n            100,\r\n          10\r\n        ) / 100;\r\n      let Liquid = {\r\n        name: liquid.name,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = modifyLiquidList.concat([Liquid]);\r\n    }\r\n    return liquid;\r\n  });\r\n  listLiquids.sort((a, b) => a.name - b.name);\r\n  return listLiquids;\r\n};\r\n\r\nexport const carLiquidsExelInfo = (cars, lists, routes) => {\r\n  let newCarLiquidsInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let carRoutes = routes.filter((route) => route.listOwner === car.id);\r\n    let listCarLiquids = NewListLiquidsCount(carRoutes);\r\n    let newCarLiquidNull = {\r\n      Найменування: car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      \"Тип ПММ\": \"---\",\r\n      Було: \"---\",\r\n      Отримано: \"---\",\r\n      Витрачено: \"---\",\r\n      Залишок: \"---\",\r\n    };\r\n    newCarLiquidsInfo = newCarLiquidsInfo.concat(newCarLiquidNull);\r\n    let newCarLiquid = {};\r\n    listCarLiquids.map((liq) => {\r\n      newCarLiquid = {\r\n        Найменування: \"\",\r\n        Номер: \"\",\r\n        \"Тип ПММ\": liq.name,\r\n        Було: liq.balanceStart,\r\n        Отримано: liq.received,\r\n        Витрачено: liq.expended,\r\n        Залишок: liq.balanceFinish,\r\n      };\r\n      newCarLiquidsInfo = newCarLiquidsInfo.concat(newCarLiquid);\r\n      return liq;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarLiquidsInfo;\r\n};\r\n\r\nexport const carListLiquidsExelInfo = (cars, lists, routes) => {\r\n  let newCarListLiquidsInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let newCarListLiquidNull_Car = {\r\n      Номер: car.governmentCarNumber,\r\n      \"Лист №\": \"---\",\r\n      \"Тип ПММ\": \"---\",\r\n      Було: \"---\",\r\n      Отримано: \"---\",\r\n      Витрачено: \"---\",\r\n      Залишок: \"---\",\r\n    };\r\n    newCarListLiquidsInfo = newCarListLiquidsInfo.concat(\r\n      newCarListLiquidNull_Car\r\n    );\r\n    newLists.map((list) => {\r\n      let newCarListLiquidNull_List = {\r\n        Номер: \"---\",\r\n        \"Лист №\": list.listNumber,\r\n        \"Тип ПММ\": \"---\",\r\n        Було: \"---\",\r\n        Отримано: \"---\",\r\n        Витрачено: \"---\",\r\n        Залишок: \"---\",\r\n      };\r\n      newCarListLiquidsInfo = newCarListLiquidsInfo.concat(\r\n        newCarListLiquidNull_List\r\n      );\r\n      let listRoutes = routes.filter((route) => route.routeOwner === list.id);\r\n      let listListLiquids = NewListLiquidsCount(listRoutes);\r\n      let newCarListLiquid = {};\r\n      listListLiquids.map((liq) => {\r\n        newCarListLiquid = {\r\n          Номер: \"---\",\r\n          \"Лист №\": \"---\",\r\n          \"Тип ПММ\": liq.name,\r\n          Було: liq.balanceStart,\r\n          Отримано: liq.received,\r\n          Витрачено: liq.expended,\r\n          Залишок: liq.balanceFinish,\r\n        };\r\n        newCarListLiquidsInfo = newCarListLiquidsInfo.concat(newCarListLiquid);\r\n        return liq;\r\n      });\r\n      return list;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarListLiquidsInfo;\r\n};\r\n\r\nexport const carExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let TO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) + Number(car.routeToTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) +\r\n          Number(car.routeToTO2) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let TO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) + Number(car.routeToTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) +\r\n          Number(car.routeToTO1) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let КР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) + Number(car.routeToКР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToКР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) +\r\n          Number(car.routeToКР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let СР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) + Number(car.routeToСР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToСР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) +\r\n          Number(car.routeToСР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      TO1: TO1,\r\n      \"До ТО1\": routeToTO1,\r\n      TO2: TO2,\r\n      \"До ТО2\": routeToTO2,\r\n      СР: СР,\r\n      \"До СР\": routeToСР,\r\n      КР: КР,\r\n      \"До КР\": routeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const agrExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const agrCarExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let TO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) + Number(car.routeToTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) +\r\n          Number(car.routeToTO2) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let TO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) + Number(car.routeToTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) +\r\n          Number(car.routeToTO1) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let КР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) + Number(car.routeToКР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToКР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) +\r\n          Number(car.routeToКР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let СР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) + Number(car.routeToСР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToСР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) +\r\n          Number(car.routeToСР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      TO1: TO1,\r\n      \"До ТО1\": routeToTO1,\r\n      TO2: TO2,\r\n      \"До ТО2\": routeToTO2,\r\n      СР: СР,\r\n      \"До СР\": routeToСР,\r\n      КР: КР,\r\n      \"До КР\": routeToКР,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const instExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const instTimeExelInfo = (cars, lists, routes) => {\r\n  let newCarListTimesInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let newCarListLiquidNull_Car = {\r\n      Назва: car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      \"Лист №\": \"---\",\r\n      Годин: \"---\",\r\n      \"Час початку\": \"---\",\r\n      \"Час закінчення\": \"---\",\r\n      Мета: \"---\",\r\n      Зауваження: \"---\",\r\n    };\r\n    newCarListTimesInfo = newCarListTimesInfo.concat(newCarListLiquidNull_Car);\r\n    newLists.map((list) => {\r\n      let newCarListLiquidNull_List = {\r\n        Назва: \"---\",\r\n        Номер: \"---\",\r\n        \"Лист №\": list.listNumber,\r\n        Годин: \"---\",\r\n        \"Час початку\": \"---\",\r\n        \"Час закінчення\": \"---\",\r\n        Мета: \"---\",\r\n        Зауваження: \"---\",\r\n      };\r\n      newCarListTimesInfo = newCarListTimesInfo.concat(\r\n        newCarListLiquidNull_List\r\n      );\r\n      let listRoutes = routes.filter((route) => route.routeOwner === list.id);\r\n      let newCarListLiquid = {};\r\n      listRoutes.map((route) => {\r\n        newCarListLiquid = {\r\n          Номер: \"---\",\r\n          \"Лист №\": \"---\",\r\n          Годин: route.routTotalTime,\r\n          \"Час початку\": moment(route.routDate).format(\"DD.MM HH:mm\"),\r\n          \"Час закінчення\": moment(route.routArrival).format(\"DD.MM HH:mm\"),\r\n          Мета: route.cargoName,\r\n          Зауваження: route.routeTo,\r\n        };\r\n        newCarListTimesInfo = newCarListTimesInfo.concat(newCarListLiquid);\r\n        return route;\r\n      });\r\n      return list;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarListTimesInfo;\r\n};\r\n"],"sourceRoot":""}