{"version":3,"sources":["mathfunctions/liquidsFunctions.js","components/PersonsComp.js","pages/UnlegalPersons.js"],"names":["require","moment","PersonsComp","memo","windowWidth","clientType","dates","userInfos","clients","projects","removeClient","openClient","clouseClient","addProject","openProject","clouseProject","removeProject","openCurrentProject","clouseCurrentProject","useState","alertClass","setAlertClass","alertText","setAlertText","modalClass","setClass","fun","setFunct","textModal","setModalText","Id","setId","setModalClass","owner","fire","auth","currentUser","uid","userInfo","find","info","userInUse","infoUse","company","jointCompany","filter","client","sort","a","b","Date","registrationDate","clientsExists","length","TransitionGroup","component","className","map","newProjects","project","projectOwner","id","projectNumber","openClientTableClass","openDeleteButtonClass","disableDeleteButtonClass","sizeArray","summArray","numb","i","summ","CSSTransition","key","classNames","timeout","onClick","align","width","companyName","secName","firstName","thirdName","phonNumber","contractNumber","contractPeriod","format","adress","incomingSourse","dateOfSignContract","negotiationsResult","type","disabled","CreateComponent","ProjectsComponent","ModalBox","modalText","modalFunction","innerFunction","AlertBox","UnlegalPersons","email","split","useContext","FirebaseContext","loading","fetchClients","fetchDates","fetchUsersInfo","fetchProjects","useEffect"],"mappings":"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","file":"static/js/9.b6104e1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport \"../CSS/LiqCompStyle.scss\";\r\nimport { NewListLiquidsCount } from \"../mathfunctions/listFunctions\";\r\nvar moment = require(\"moment\");\r\n\r\nexport const CountStartDensity = (routes, liquid) => {\r\n  let liquidRoutes = routes.filter((route) => route.liquidName === liquid.name);\r\n  let dansitiesArray = liquidRoutes.map((route) => {\r\n    return route.density;\r\n  });\r\n  return dansitiesArray;\r\n};\r\n\r\nexport const ExportReactCSV = ({ csvData, fileName, textCSV }) => {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n  const exportToCSV = (csvData, fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(csvData);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n  return (\r\n    <button\r\n      onClick={(e) => exportToCSV(csvData, fileName)}\r\n      className=\"btn btn-success createExelBtn\"\r\n    >\r\n      <small>{textCSV}</small>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const CommonLiquidsCount = (routes, cars) => {\r\n  let commonListLiquids = [];\r\n  let listLiquids = [];\r\n  if (!routes) {\r\n    routes = [];\r\n  }\r\n  cars.map((car) => {\r\n    let carRoutes = routes.filter((route) => route.listOwner === car.id);\r\n    let carListLiquids = NewListLiquidsCount(carRoutes);\r\n    commonListLiquids = commonListLiquids.concat(carListLiquids);\r\n    return car;\r\n  });\r\n  commonListLiquids.map((liquid) => {\r\n    let balanceStart = 0;\r\n    let received = 0;\r\n    let expended = 0;\r\n    let balanceFinish = 0;\r\n    let existLiquid = !!listLiquids.filter((liq) => liq.name === liquid.name)\r\n      .length;\r\n    if (!existLiquid) {\r\n      balanceStart =\r\n        parseInt((balanceStart + Number(liquid.balanceStart)) * 100, 10) / 100;\r\n      received = parseInt((received + Number(liquid.received)) * 100, 10) / 100;\r\n      expended = parseInt((expended + Number(liquid.expended)) * 100, 10) / 100;\r\n      balanceFinish =\r\n        parseInt((balanceFinish + Number(liquid.balanceFinish)) * 100, 10) /\r\n        100;\r\n      let Liquid = {\r\n        name: liquid.name,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = listLiquids.concat([Liquid]);\r\n    } else {\r\n      let modifyLiquid = listLiquids\r\n        .filter((liq) => liq.name === liquid.name)\r\n        .shift();\r\n      let modifyLiquidList = listLiquids.filter(\r\n        (liq) => liq.name !== liquid.name\r\n      );\r\n      balanceStart =\r\n        parseInt(\r\n          (Number(modifyLiquid.balanceStart) + Number(liquid.balanceStart)) *\r\n            100,\r\n          10\r\n        ) / 100;\r\n      received =\r\n        parseInt(\r\n          (Number(modifyLiquid.received) + Number(liquid.received)) * 100,\r\n          10\r\n        ) / 100;\r\n      expended =\r\n        parseInt(\r\n          (Number(modifyLiquid.expended) + Number(liquid.expended)) * 100,\r\n          10\r\n        ) / 100;\r\n      balanceFinish =\r\n        parseInt(\r\n          (Number(modifyLiquid.balanceFinish) + Number(liquid.balanceFinish)) *\r\n            100,\r\n          10\r\n        ) / 100;\r\n      let Liquid = {\r\n        name: liquid.name,\r\n        balanceStart: balanceStart,\r\n        received: received,\r\n        expended: expended,\r\n        balanceFinish: balanceFinish,\r\n      };\r\n      listLiquids = modifyLiquidList.concat([Liquid]);\r\n    }\r\n    return liquid;\r\n  });\r\n  listLiquids.sort((a, b) => a.name - b.name);\r\n  return listLiquids;\r\n};\r\n\r\nexport const carLiquidsExelInfo = (cars, lists, routes) => {\r\n  let newCarLiquidsInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let carRoutes = routes.filter((route) => route.listOwner === car.id);\r\n    let listCarLiquids = NewListLiquidsCount(carRoutes);\r\n    let newCarLiquidNull = {\r\n      Найменування: car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      \"Тип ПММ\": \"---\",\r\n      Було: \"---\",\r\n      Отримано: \"---\",\r\n      Витрачено: \"---\",\r\n      Залишок: \"---\",\r\n    };\r\n    newCarLiquidsInfo = newCarLiquidsInfo.concat(newCarLiquidNull);\r\n    let newCarLiquid = {};\r\n    listCarLiquids.map((liq) => {\r\n      newCarLiquid = {\r\n        Найменування: \"\",\r\n        Номер: \"\",\r\n        \"Тип ПММ\": liq.name,\r\n        Було: liq.balanceStart,\r\n        Отримано: liq.received,\r\n        Витрачено: liq.expended,\r\n        Залишок: liq.balanceFinish,\r\n      };\r\n      newCarLiquidsInfo = newCarLiquidsInfo.concat(newCarLiquid);\r\n      return liq;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarLiquidsInfo;\r\n};\r\n\r\nexport const carListLiquidsExelInfo = (cars, lists, routes) => {\r\n  let newCarListLiquidsInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let newCarListLiquidNull_Car = {\r\n      Номер: car.governmentCarNumber,\r\n      \"Лист №\": \"---\",\r\n      \"Тип ПММ\": \"---\",\r\n      Було: \"---\",\r\n      Отримано: \"---\",\r\n      Витрачено: \"---\",\r\n      Залишок: \"---\",\r\n    };\r\n    newCarListLiquidsInfo = newCarListLiquidsInfo.concat(\r\n      newCarListLiquidNull_Car\r\n    );\r\n    newLists.map((list) => {\r\n      let newCarListLiquidNull_List = {\r\n        Номер: \"---\",\r\n        \"Лист №\": list.listNumber,\r\n        \"Тип ПММ\": \"---\",\r\n        Було: \"---\",\r\n        Отримано: \"---\",\r\n        Витрачено: \"---\",\r\n        Залишок: \"---\",\r\n      };\r\n      newCarListLiquidsInfo = newCarListLiquidsInfo.concat(\r\n        newCarListLiquidNull_List\r\n      );\r\n      let listRoutes = routes.filter((route) => route.routeOwner === list.id);\r\n      let listListLiquids = NewListLiquidsCount(listRoutes);\r\n      let newCarListLiquid = {};\r\n      listListLiquids.map((liq) => {\r\n        newCarListLiquid = {\r\n          Номер: \"---\",\r\n          \"Лист №\": \"---\",\r\n          \"Тип ПММ\": liq.name,\r\n          Було: liq.balanceStart,\r\n          Отримано: liq.received,\r\n          Витрачено: liq.expended,\r\n          Залишок: liq.balanceFinish,\r\n        };\r\n        newCarListLiquidsInfo = newCarListLiquidsInfo.concat(newCarListLiquid);\r\n        return liq;\r\n      });\r\n      return list;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarListLiquidsInfo;\r\n};\r\n\r\nexport const carExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let TO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) + Number(car.routeToTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) +\r\n          Number(car.routeToTO2) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let TO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) + Number(car.routeToTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) +\r\n          Number(car.routeToTO1) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let КР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) + Number(car.routeToКР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToКР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) +\r\n          Number(car.routeToКР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let СР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) + Number(car.routeToСР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToСР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) +\r\n          Number(car.routeToСР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      TO1: TO1,\r\n      \"До ТО1\": routeToTO1,\r\n      TO2: TO2,\r\n      \"До ТО2\": routeToTO2,\r\n      СР: СР,\r\n      \"До СР\": routeToСР,\r\n      КР: КР,\r\n      \"До КР\": routeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const agrExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const agrCarExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let TO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) + Number(car.routeToTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO2 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO2) +\r\n          Number(car.routeToTO2) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let TO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) + Number(car.routeToTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToTO1 =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastTO1) +\r\n          Number(car.routeToTO1) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let КР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) + Number(car.routeToКР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToКР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastКР) +\r\n          Number(car.routeToКР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let СР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) + Number(car.routeToСР)) * 100,\r\n        10\r\n      ) / 100;\r\n    let routeToСР =\r\n      parseInt(\r\n        (Number(car.carIndicatorLastСР) +\r\n          Number(car.routeToСР) -\r\n          Number(car.carIndicatorLast)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      TO1: TO1,\r\n      \"До ТО1\": routeToTO1,\r\n      TO2: TO2,\r\n      \"До ТО2\": routeToTO2,\r\n      СР: СР,\r\n      \"До СР\": routeToСР,\r\n      КР: КР,\r\n      \"До КР\": routeToКР,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const instExelInfo = (cars) => {\r\n  let commonCarsInfo = [];\r\n  cars.map((car) => {\r\n    let timeTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) + Number(car.nextTimeTO2)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO2 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO2) +\r\n          Number(car.nextTimeTO2) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) + Number(car.nextTimeTO1)) * 100,\r\n        10\r\n      ) / 100;\r\n    let timeToTO1 =\r\n      parseInt(\r\n        (Number(car.carTimeLastTO1) +\r\n          Number(car.nextTimeTO1) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeКР =\r\n      parseInt((Number(car.carTimeLastКР) + Number(car.nextTimeКР)) * 100, 10) /\r\n      100;\r\n    let timeToКР =\r\n      parseInt(\r\n        (Number(car.carTimeLastКР) +\r\n          Number(car.nextTimeКР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    let timeСР =\r\n      parseInt((Number(car.carTimeLastСР) + Number(car.nextTimeСР)) * 100, 10) /\r\n      100;\r\n    let timeToСР =\r\n      parseInt(\r\n        (Number(car.carTimeLastСР) +\r\n          Number(car.nextTimeСР) -\r\n          Number(car.carTimeFinish)) *\r\n          100,\r\n        10\r\n      ) / 100;\r\n    commonCarsInfo = commonCarsInfo.concat({\r\n      \"Найменув.\": car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      Пробіг: car.carIndicatorLast,\r\n      Км: car.totalCarMileage,\r\n      \"Напрац.\": car.carTimeFinish,\r\n      Год: car.carTimeTotal,\r\n      \"На дату\": moment(car.dateOfRegistration).format(\"DD.MM HH:mm\"),\r\n      \"№ двиг.\": car.carEngineNumber,\r\n      \"№ шасі\": car.factoryCarNumber,\r\n      \"№ пасп.\": car.factoryCarNumber,\r\n      \"Обладн.\": car.specialCarEquipment,\r\n      \"№ обл.\": car.specialCarEquipmentNumber,\r\n      Власник: car.carOwnerName,\r\n      Вироблено: car.dateOfCarProduction,\r\n      Група: car.operatingGroup,\r\n      Категорія: car.category,\r\n      \"Час ТО1\": timeTO1,\r\n      \"Час до ТО1\": timeToTO1,\r\n      \"Час ТО2\": timeTO2,\r\n      \"Час до ТО2\": timeToTO2,\r\n      \"Час СР\": timeСР,\r\n      \"Час до СР\": timeToСР,\r\n      \"Час КР\": timeКР,\r\n      \"Час до КР\": timeToКР,\r\n      Стан: car.serviceabilityreason,\r\n    });\r\n    return car;\r\n  });\r\n  return commonCarsInfo;\r\n};\r\n\r\nexport const instTimeExelInfo = (cars, lists, routes) => {\r\n  let newCarListTimesInfo = [];\r\n  cars.map((car) => {\r\n    let newLists = lists.filter((list) => list.listOwner === car.id);\r\n    newLists.sort((a, b) => a.listNumber - b.listNumber);\r\n    let newCarListLiquidNull_Car = {\r\n      Назва: car.typeOfCar,\r\n      Номер: car.governmentCarNumber,\r\n      \"Лист №\": \"---\",\r\n      Годин: \"---\",\r\n      \"Час початку\": \"---\",\r\n      \"Час закінчення\": \"---\",\r\n      Мета: \"---\",\r\n      Зауваження: \"---\",\r\n    };\r\n    newCarListTimesInfo = newCarListTimesInfo.concat(newCarListLiquidNull_Car);\r\n    newLists.map((list) => {\r\n      let newCarListLiquidNull_List = {\r\n        Назва: \"---\",\r\n        Номер: \"---\",\r\n        \"Лист №\": list.listNumber,\r\n        Годин: \"---\",\r\n        \"Час початку\": \"---\",\r\n        \"Час закінчення\": \"---\",\r\n        Мета: \"---\",\r\n        Зауваження: \"---\",\r\n      };\r\n      newCarListTimesInfo = newCarListTimesInfo.concat(\r\n        newCarListLiquidNull_List\r\n      );\r\n      let listRoutes = routes.filter((route) => route.routeOwner === list.id);\r\n      let newCarListLiquid = {};\r\n      listRoutes.map((route) => {\r\n        newCarListLiquid = {\r\n          Номер: \"---\",\r\n          \"Лист №\": \"---\",\r\n          Годин: route.routTotalTime,\r\n          \"Час початку\": moment(route.routDate).format(\"DD.MM HH:mm\"),\r\n          \"Час закінчення\": moment(route.routArrival).format(\"DD.MM HH:mm\"),\r\n          Мета: route.cargoName,\r\n          Зауваження: route.routeTo,\r\n        };\r\n        newCarListTimesInfo = newCarListTimesInfo.concat(newCarListLiquid);\r\n        return route;\r\n      });\r\n      return list;\r\n    });\r\n    return car;\r\n  });\r\n  return newCarListTimesInfo;\r\n};\r\n","import React, { memo, useState } from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport // ExportReactCSV,\r\n//carExelInfo,\r\n//carLiquidsExelInfo,\r\n//carListLiquidsExelInfo,\r\n\"../mathfunctions/liquidsFunctions\";\r\nimport { CreateComponent } from \"./CreateComponent\";\r\nimport { ModalBox } from \"./ModalBox\";\r\nimport { AlertBox } from \"./AlertBox\";\r\nimport fire from \"../config/Fire\";\r\nimport { ProjectsComponent } from \"./ProjectsComponent\";\r\nvar moment = require(\"moment\");\r\n\r\nexport const PersonsComp = memo(\r\n  ({\r\n    //---COMMON DATES ----------------------->\r\n    windowWidth,\r\n    clientType,\r\n    //---COMMON STATE ----------------------->\r\n    dates,\r\n    userInfos,\r\n    clients,\r\n    projects,\r\n    //---CLIENT FUNCTIONS ------------------->\r\n    removeClient,\r\n    openClient,\r\n    clouseClient,\r\n    //---PROJECTS FUNCTIONS ----------------->\r\n    addProject,\r\n    openProject,\r\n    clouseProject,\r\n    removeProject,\r\n    openCurrentProject,\r\n    clouseCurrentProject,\r\n\r\n    //routes,\r\n    // openNewList,\r\n    // clouseNewList,\r\n    // openNewRoute,\r\n    // closeNewRoute,\r\n    // openList,\r\n    // closeList,\r\n    // openRoute,\r\n    // closeRoute,\r\n  }) => {\r\n    //---Alert functions block---------------->\r\n    const dataWarningText =\r\n      \"Ви намагаєтеся видалити дані! Після видалення відновлення даних буде не можливим!\";\r\n    let [alertClass, setAlertClass] = useState(\"modal\");\r\n    let [alertText, setAlertText] = useState(\"\");\r\n    let [modalClass, setClass] = useState(\"modal\");\r\n    let [fun, setFunct] = useState(\"\");\r\n    let [textModal, setModalText] = useState();\r\n    let [Id, setId] = useState();\r\n    let setModalClass = () => {\r\n      if ((modalClass = \"modal\")) {\r\n        setClass(\"open\");\r\n      } else {\r\n        setClass(\"modal\");\r\n      }\r\n    };\r\n    //--Create user data----------------------->\r\n    var owner = fire.auth.currentUser.uid;\r\n    let userInfo = userInfos.find((info) => info.owner === owner);\r\n    if (!userInfo) {\r\n      return null;\r\n    }\r\n    let userInUse = userInfos.find(\r\n      (infoUse) => infoUse.company === userInfo.jointCompany\r\n    );\r\n    if (!userInUse) {\r\n      return null;\r\n    }\r\n    //--Create clients data array--------------->\r\n    clients = clients.filter((client) => client.owner === userInUse.owner);\r\n    clients = clients.filter((client) => client.clientType === clientType);\r\n    clients.sort(\r\n      (a, b) => new Date(b.registrationDate) - new Date(a.registrationDate)\r\n    );\r\n    let clientsExists = clients.length;\r\n    if (clientsExists === 0) {\r\n      return null;\r\n    }\r\n    //---------------------------------Cars JSX block----------------------------------//\r\n    return (\r\n      <div>\r\n        <div>\r\n          <TransitionGroup component=\"ul\" className=\"list-group\">\r\n            {clientsExists &&\r\n              clients.map((client) => {\r\n                //--------------------Create client projects and routes-----------------------//\r\n                let newProjects = projects.filter(\r\n                  (project) => project.projectOwner === client.id\r\n                );\r\n                newProjects.sort((a, b) => a.projectNumber - b.projectNumber);\r\n                // let carRoutes = routes.filter(\r\n                //   (route) => route.listOwner === client.id\r\n                // );\r\n                // //---------------------------Car liquids array---------------------------//\r\n                // let listCarLiquids = NewListLiquidsCount(carRoutes);\r\n\r\n                //--CLIENT TYPE DYNAMIC CLASSIS ----------->\r\n                let clientType = null;\r\n                if (client.clientType === \"Юрідичний\") {\r\n                  clientType = \"legalClients\";\r\n                } else {\r\n                  clientType = \"unlegalClients\";\r\n                }\r\n                //--DYNAMIC CLASSIS---------------------->\r\n                //--TABLE----->\r\n                let openClientTableClass = null;\r\n                if (client.openClient) {\r\n                  openClientTableClass = \"tableItemsAreClouse\";\r\n                }\r\n                //--DELETE BUTTON -->\r\n                let openDeleteButtonClass = null;\r\n                if (client.openClient) {\r\n                  openDeleteButtonClass = \"deleteButtonItemAreClouse\";\r\n                }\r\n                if (newProjects.length) {\r\n                  openDeleteButtonClass = \"deleteButtonItemAreClouse\";\r\n                }\r\n                if (userInfo.company !== userInfo.jointCompany) {\r\n                  openDeleteButtonClass = \"deleteButtonItemAreClouse\";\r\n                }\r\n                //--DISABLE BUTTON--->\r\n                let disableDeleteButtonClass = \"deleteButtonItemAreClouse\";\r\n                if (newProjects.length) {\r\n                  disableDeleteButtonClass = \"\";\r\n                }\r\n                if (userInfo.company !== userInfo.jointCompany) {\r\n                  disableDeleteButtonClass = \"\";\r\n                }\r\n                if (client.openClient) {\r\n                  disableDeleteButtonClass = \"deleteButtonItemAreClouse\";\r\n                }\r\n                //----TABLE SIZE FUNCTION---------------->\r\n                const sizeArray = [\r\n                  180,\r\n                  105,\r\n                  80,\r\n                  120,\r\n                  90,\r\n                  80,\r\n                  40,\r\n                  80,\r\n                  300,\r\n                  70,\r\n                  90,\r\n                  90\r\n                ];\r\n                const summArray = (numb, sizeArray) => {\r\n                  let i = 0;\r\n                  let summ = 0;\r\n                  while (i < numb) {\r\n                    summ = summ + sizeArray[i];\r\n                    i++;\r\n                  }\r\n                  return summ;\r\n                };\r\n                //---------------------------CLIENTS RENDER----------------------------//\r\n                return (\r\n                  <CSSTransition\r\n                    key={client.id}\r\n                    classNames={\"note\"}\r\n                    timeout={800}\r\n                  >\r\n                    <li\r\n                      key={client.id}\r\n                      className=\"list-group-item clientInnerLi\"\r\n                    >\r\n                      <form className=\"d-flex justify-content-between clientInnerForm\">\r\n                        <table\r\n                          className={`clientTable ${openClientTableClass}`}\r\n                          onClick={() => {\r\n                            openClient(client);\r\n                          }}\r\n                        >\r\n                          <tbody>\r\n                            <tr align=\"center\">\r\n                            {windowWidth > 70 + summArray(1, sizeArray) && (\r\n                              <td width={sizeArray[0]}>\r\n                                <small className={clientType}>\r\n                                  {client.companyName}\r\n                                </small>\r\n                              </td>\r\n                            )}\r\n                               {windowWidth > 70 + summArray(2, sizeArray) && (\r\n                                <td width={sizeArray[1]}>\r\n                                  <small>{client.secName}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(3, sizeArray) && (\r\n                                <td width={sizeArray[2]}>\r\n                                  <small>{client.firstName}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(4, sizeArray) && (\r\n                                <td width={sizeArray[3]}>\r\n                                  <small>{client.thirdName}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(5, sizeArray) && (\r\n                                <td width={sizeArray[4]}>\r\n                                  <small>{client.phonNumber}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(6, sizeArray) && (\r\n                                <td width={sizeArray[5]}>\r\n                                  <small>{client.contractNumber}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(7, sizeArray) && (\r\n                                <td width={sizeArray[6]}>\r\n                                  <small>{client.contractPeriod}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(8, sizeArray) && (\r\n                                <td width={sizeArray[7]}>\r\n                                  <small>\r\n                                    {`${moment(client.registrationDate).format(\r\n                                      \"DD.MM HH:mm\"\r\n                                    )}`}\r\n                                  </small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(9, sizeArray) && (\r\n                                <td width={sizeArray[8]}>\r\n                                  <small>{client.adress}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(10, sizeArray) && (\r\n                                <td width={sizeArray[9]}>\r\n                                  <small>{client.incomingSourse}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(11, sizeArray) && (\r\n                                <td width={sizeArray[10]}>\r\n                                  <small>{client.dateOfSignContract}</small>\r\n                                </td>\r\n                              )}\r\n                              {windowWidth > 70 + summArray(12, sizeArray) && (\r\n                                <td width={sizeArray[11]}>\r\n                                  <small className=\"negotiationsResult\">\r\n                                    {client.negotiationsResult}\r\n                                  </small>\r\n                                </td>\r\n                              )}\r\n                              {/* {windowWidth > 1201 && (\r\n                                    <td width=\"90\">\r\n                                      <small className={clientType}>ТО1: </small>\r\n                                      <small className={typeRouteTO1}>\r\n                                        {TO1}\r\n                                      </small>\r\n                                    </td>\r\n                                  )}\r\n                                */}\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                        <div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className={`btn btn-outline-danger btn-sm deleteCarBtn ${openDeleteButtonClass}`}\r\n                            onClick={() => {\r\n                              setId(client.id);\r\n                              setFunct(\"removeCar\");\r\n                              setModalText(dataWarningText);\r\n                              setModalClass();\r\n                            }}\r\n                          >\r\n                            &times;\r\n                          </button>\r\n                          <button\r\n                            type=\"button\"\r\n                            className={`btn btn-outline-secondary btn-sm deleteCarBtn ${disableDeleteButtonClass}`}\r\n                            disabled\r\n                          >\r\n                            &times;\r\n                          </button>\r\n                          {client.openClient && (\r\n                            <table\r\n                              className=\"clientTable\"\r\n                              onClick={() => {\r\n                                clouseClient(client);\r\n                              }}\r\n                            >\r\n                              <tbody>\r\n                                <tr align=\"center\">\r\n                                  <td width=\"200\">\r\n                                    <small className={clientType}>\r\n                                      For close\r\n                                    </small>\r\n                                    {/* <small className={typeRouteКР}>{КР}</small> */}\r\n                                  </td>\r\n                                  {windowWidth > 247 && (\r\n                                    <td width=\"100\" className={clientType}>\r\n                                      <small>Info</small>\r\n                                    </td>\r\n                                  )}\r\n                                  {windowWidth > 247 && (\r\n                                    <td width=\"100\" className={clientType}>\r\n                                      <small>Info</small>\r\n                                    </td>\r\n                                  )}\r\n                                  {windowWidth > 247 && (\r\n                                    <td width=\"100\" className={clientType}>\r\n                                      <small>Info</small>\r\n                                    </td>\r\n                                  )}\r\n                                  {windowWidth > 247 && (\r\n                                    <td width=\"100\" className={clientType}>\r\n                                      <small>Info</small>\r\n                                    </td>\r\n                                  )}\r\n                                  {windowWidth > 247 && (\r\n                                    <td width=\"100\" className={clientType}>\r\n                                      <small>Info</small>\r\n                                    </td>\r\n                                  )}\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          )}\r\n                          {client.openClient && (\r\n                            <CreateComponent\r\n                              client={client}\r\n                              clients={clients}\r\n                              userInfo={userInfo}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </form>\r\n                      <form className=\"addingObjTable\"></form>\r\n                      {!client.openClient && (\r\n                        <ProjectsComponent\r\n                          client={client}\r\n                          dates={dates}\r\n                          //routes={routes}\r\n                          newProjects={newProjects}\r\n                          //openNewRoute={openNewRoute}\r\n                          //closeNewRoute={closeNewRoute}\r\n                          addProject={addProject}\r\n                          openProject={openProject}\r\n                          clouseProject={clouseProject}\r\n                          removeProject={removeProject}\r\n                          openCurrentProject={openCurrentProject}\r\n                          clouseCurrentProject={clouseCurrentProject}\r\n                          //openRoute={openRoute}\r\n                          //closeRoute={closeRoute}\r\n                          windowWidth={windowWidth}\r\n                          setAlertClass={setAlertClass}\r\n                          setAlertText={setAlertText}\r\n                          setFunct={setFunct}\r\n                          setModalText={setModalText}\r\n                          setModalClass={setModalClass}\r\n                          setId={setId}\r\n                          modalClass={modalClass}\r\n                          //carRoutes={carRoutes}\r\n                          //listCarLiquids={listCarLiquids}\r\n                          userInfo={userInfo}\r\n                        />\r\n                      )}\r\n                    </li>\r\n                  </CSSTransition>\r\n                );\r\n              })}\r\n            {fun === \"removeCar\" && (\r\n              <ModalBox\r\n                modalClass={modalClass}\r\n                modalText={textModal}\r\n                modalFunction={setClass}\r\n                Id={Id}\r\n                innerFunction={removeClient}\r\n              />\r\n            )}\r\n            {fun === \"removeList\" && (\r\n              <ModalBox\r\n                modalClass={modalClass}\r\n                modalText={textModal}\r\n                modalFunction={setClass}\r\n                Id={Id}\r\n                innerFunction={removeProject}\r\n              />\r\n            )}\r\n            <AlertBox\r\n              modalClass={alertClass}\r\n              modalText={alertText}\r\n              modalFunction={setAlertClass}\r\n            />\r\n          </TransitionGroup>\r\n        </div>\r\n        <div className=\"d-flex justify-content-between\">\r\n          {/* <ExportReactCSV\r\n            csvData={carExelInfo(clients)}\r\n            fileName={\"авто\"}\r\n            textCSV=\"авто.xlx\"\r\n          /> */}\r\n          {/* <ExportReactCSV\r\n            csvData={carLiquidsExelInfo(clients, lists, routes)}\r\n            fileName={\"пммАвто\"}\r\n            textCSV=\"пмм.xlx\"\r\n          /> */}\r\n          {/* <ExportReactCSV\r\n            csvData={carListLiquidsExelInfo(clients, lists, routes)}\r\n            fileName={\"пммЛист\"}\r\n            textCSV=\"листи.xlx\"\r\n          />    */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { useContext, useEffect, memo } from \"react\";\r\nimport { PersonsComp } from \"../components/PersonsComp\";\r\nimport { FirebaseContext } from \"../context/fiebase/firebaseContext\";\r\nimport { Loader } from \"../components/Loader\";\r\nimport fire from \"../config/Fire\";\r\n\r\nconst UnlegalPersons = memo(({ windowWidth }) => {\r\n  const clientType = \"Фізичний\";\r\n    let email = \"\";\r\n    if(fire.auth.currentUser){\r\n        email = fire.auth.currentUser.email;\r\n        email = email.split(\"@\")[0];\r\n    } \r\n  const {\r\n    clients,\r\n    dates,\r\n    userInfos,\r\n\r\n    loading,\r\n    fetchClients,\r\n    fetchDates,\r\n    fetchUsersInfo,\r\n\r\n    openClient,\r\n    clouseClient,\r\n    removeClient,\r\n    projects,\r\n    addProject,\r\n    openProject,\r\n    clouseProject,\r\n    removeProject,\r\n    fetchProjects,\r\n    openCurrentProject,\r\n    clouseCurrentProject,\r\n    //routes,\r\n    \r\n    //fetchRoutes,\r\n    // openList,\r\n    // closeList,\r\n    // openRoute,\r\n    // closeRoute,\r\n    // openNewList,\r\n    // openNewRoute,\r\n    // closeNewRoute,\r\n    // clouseNewList, \r\n  } = useContext(FirebaseContext);\r\n  useEffect(() => {\r\n    fetchClients();\r\n    fetchDates();\r\n    fetchUsersInfo();\r\n    fetchProjects();\r\n    //fetchRoutes();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <small>{email}</small>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <PersonsComp\r\n          clients={clients}\r\n          dates={dates}\r\n          userInfos={userInfos}\r\n          openClient={openClient}\r\n          clouseClient={clouseClient}\r\n          removeClient={removeClient}\r\n          addProject={addProject}\r\n          openProject={openProject}\r\n          clouseProject={clouseProject}\r\n          removeProject={removeProject}\r\n          clientType={clientType}\r\n          windowWidth={windowWidth}\r\n          projects={projects}\r\n          openCurrentProject={openCurrentProject}\r\n          clouseCurrentProject={clouseCurrentProject}\r\n          //routes={routes}\r\n          //openList={openList}\r\n          //closeList={closeList}\r\n          //openRoute={openRoute}\r\n          //closeRoute={closeRoute}\r\n          //openNewList={openNewList}\r\n          //clouseNewList={clouseNewList}\r\n          //openNewRoute={openNewRoute}\r\n          //closeNewRoute={closeNewRoute}\r\n         \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default UnlegalPersons;\r\n\r\n"],"sourceRoot":""}